package 总结;

public class 总结 {
/**
 * 抽象类:
 * 		抽象方法:只有方法名和参数列表，没有方法体。
 *          用于描述抽象的功能，多用于功能设计，定义软件之间的
 *       约定功能。
 *       Timer 类约定:在适合时候调用TimerTask的抽象方法run()
 *       使用Timer只需要实现run方法就可以实现定时任务。
 *       Timer 定时的"回调"run方法实现定时任务
 * 
 * 		一般把包含抽象方法的类定义为抽象类
 * 		抽象类可以定义变量，不能直接实例化
 * 		抽象类只能被继承，具体类继承抽象类时候必须"实现"(重写)全部抽象方法
 * 
 * 
 * 接口 :
 * 		接口相当于所有方法都是抽象方法，所有属性都是常量的抽象类
 * 		接口中只能声明常量和抽象方法
 * 		接口可以定义变量，可以引用实现类的实例
 * 		接口不能直接实例化
 * 		实现接口必须实现全部的抽象方法
 * 		接口可以继承接口
 * 		类可以实现多个接口，接口和实现类是父子类型关系
 * 
 * 		具体类实现接口必须实现全部的抽象方法，就说明，接口约定了具体类的方法，约定了类的
 * 	  外部行为
 *      接口可以实现软件组件之间的插接组装关系
 *      
 *内部类
 *		定义在类内部的类
 *		用于在外部类中封装类的定义
 *		内部类可以共享外部类的属性和方法
 *
 *		如:定时器任务的实现，经常采用内部类实现
 *匿名内部类 也称为 匿名类
 *		语法非常简洁,new类名(构造器参数){方法体}	
 * 		匿名类容易与创建对象混淆。创建对象:new 类名(参数)
 * 		匿名类是继承父类型并且同时实例化为子类对象，没有子类类名。
 * 		匿名类可以继承类，继承抽象类，也可以实现接口。
 * 		匿名类语法简洁，工作中非常常用。
 * 		书写时要注意括号配对
 * 
 * 
 * 贪吃蛇
 * 		实现舞台的构造器
 *      添加舞台构造器 WormStage()
 *      在舞台上添加生成食物的算法 createFood()
 *      在蛇添加判断包含的算法:contains(x,y)
 *      在TestCase中添加测试实例，测试WormStage构造器
 *      在TestCase中添加测试实力老，测试worm.contains()方法
 * 
 * 
 * 
 * 
 */
}
